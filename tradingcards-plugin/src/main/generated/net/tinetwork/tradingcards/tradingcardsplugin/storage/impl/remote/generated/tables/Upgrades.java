/*
 * This file is generated by jOOQ.
 */
package net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.tables;


import java.util.Collection;

import net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.DefaultSchema;
import net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.Keys;
import net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.tables.records.UpgradesRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Upgrades extends TableImpl<UpgradesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>{prefix}upgrades</code>
     */
    public static final Upgrades UPGRADES = new Upgrades();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UpgradesRecord> getRecordType() {
        return UpgradesRecord.class;
    }

    /**
     * The column <code>{prefix}upgrades.upgrade_id</code>.
     */
    public final TableField<UpgradesRecord, String> UPGRADE_ID = createField(DSL.name("upgrade_id"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    private Upgrades(Name alias, Table<UpgradesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Upgrades(Name alias, Table<UpgradesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>{prefix}upgrades</code> table reference
     */
    public Upgrades(String alias) {
        this(DSL.name(alias), UPGRADES);
    }

    /**
     * Create an aliased <code>{prefix}upgrades</code> table reference
     */
    public Upgrades(Name alias) {
        this(alias, UPGRADES);
    }

    /**
     * Create a <code>{prefix}upgrades</code> table reference
     */
    public Upgrades() {
        this(DSL.name("{prefix}upgrades"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<UpgradesRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_B;
    }

    @Override
    public Upgrades as(String alias) {
        return new Upgrades(DSL.name(alias), this);
    }

    @Override
    public Upgrades as(Name alias) {
        return new Upgrades(alias, this);
    }

    @Override
    public Upgrades as(Table<?> alias) {
        return new Upgrades(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Upgrades rename(String name) {
        return new Upgrades(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Upgrades rename(Name name) {
        return new Upgrades(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Upgrades rename(Table<?> name) {
        return new Upgrades(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Upgrades where(Condition condition) {
        return new Upgrades(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Upgrades where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Upgrades where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Upgrades where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Upgrades where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Upgrades where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Upgrades where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Upgrades where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Upgrades whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Upgrades whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
