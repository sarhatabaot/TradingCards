/*
 * This file is generated by jOOQ.
 */
package net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.tables;


import java.util.Collection;

import net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.DefaultSchema;
import net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.Keys;
import net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.enums.SeriesSeriesMode;
import net.tinetwork.tradingcards.tradingcardsplugin.storage.impl.remote.generated.tables.records.SeriesRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Series extends TableImpl<SeriesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>{prefix}series</code>
     */
    public static final Series SERIES = new Series();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SeriesRecord> getRecordType() {
        return SeriesRecord.class;
    }

    /**
     * The column <code>{prefix}series.series_id</code>.
     */
    public final TableField<SeriesRecord, String> SERIES_ID = createField(DSL.name("series_id"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>{prefix}series.display_name</code>.
     */
    public final TableField<SeriesRecord, String> DISPLAY_NAME = createField(DSL.name("display_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>{prefix}series.series_mode</code>.
     */
    public final TableField<SeriesRecord, SeriesSeriesMode> SERIES_MODE = createField(DSL.name("series_mode"), SQLDataType.VARCHAR.asEnumDataType(SeriesSeriesMode.class), this, "");

    private Series(Name alias, Table<SeriesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Series(Name alias, Table<SeriesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>{prefix}series</code> table reference
     */
    public Series(String alias) {
        this(DSL.name(alias), SERIES);
    }

    /**
     * Create an aliased <code>{prefix}series</code> table reference
     */
    public Series(Name alias) {
        this(alias, SERIES);
    }

    /**
     * Create a <code>{prefix}series</code> table reference
     */
    public Series() {
        this(DSL.name("{prefix}series"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<SeriesRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_7F;
    }

    @Override
    public Series as(String alias) {
        return new Series(DSL.name(alias), this);
    }

    @Override
    public Series as(Name alias) {
        return new Series(alias, this);
    }

    @Override
    public Series as(Table<?> alias) {
        return new Series(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Series rename(String name) {
        return new Series(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Series rename(Name name) {
        return new Series(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Series rename(Table<?> name) {
        return new Series(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Series where(Condition condition) {
        return new Series(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Series where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Series where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Series where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Series where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Series where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Series where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Series where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Series whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Series whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
